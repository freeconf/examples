---
title: Node/Basic
weight: 30
tags:
  - go
  - python
  - server
  - node
description: >
  Building Go nodes by using abstract class
---

## Use cases:
* high-level routing areas
* `list` nodes
* areas with not a lot of CRUD
* bridges to systems that are not Go structs (e.g. DB, YAML, external REST APIs, etc.)
* part of code generation

## Highlevel routing

**Code**
{{< tabs name="app_src" >}}
{{% tab name="Go" %}}
```go
[[ cp "app.go" ]]
```
{{% /tab %}}
{{% tab name="Python" %}}
```python
[[ cp "python/app.py" ]]
```
{{% /tab %}}
{{< /tabs >}}

**YANG**
```
[[ cp "my-app.yang" ]]
```

**...then your node code can be this.**

{{< tabs name="manage_src" >}}
{{% tab name="Go" %}}
```go
[[ cp "manage.go" ]]
```
You cannot use `Reflect` here because fields are private.
{{% /tab %}}

{{% tab name="Python" %}}
```python
[[ cp "python/manage.py" ]]
```
{{% /tab %}}
{{< /tabs >}}


### Additional Files
{{< tabs name="test_src" >}}

{{% tab name="Go" %}}
file: `manage_test.go`
```go
[[ cp "manage_test.go" ]]
```
{{% /tab %}}

{{% tab name="Python" %}}
file: `test_manage.py`
```python
[[ cp "python/test_manage.py" ]]
```
{{% /tab %}}
{{< /tabs >}}

